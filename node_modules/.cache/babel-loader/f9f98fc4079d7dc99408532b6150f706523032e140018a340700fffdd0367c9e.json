{"ast":null,"code":"var _jsxFileName = \"/Users/alexandrugarabajii/Dev/Ruric-SRL/src/components/ChiptuningBlock/ChiptuningBlock.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ChiptuningBlock.css';\nimport { useLanguage } from '../languageContext/laguageContext';\nimport { translations } from '../../translations';\nimport { powerImg, dynamicsImg, fuelImg, smoothImg, errorImg, safetyImg, stage1, stage2, stage3 } from 'images/chiptuning';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst iconMap = {\n  power: powerImg,\n  dynamics: dynamicsImg,\n  fuel: fuelImg,\n  smooth: smoothImg,\n  error: errorImg,\n  safety: safetyImg\n};\nconst stageMap = {\n  stage1,\n  stage2,\n  stage3\n};\nexport default function Chiptuning() {\n  _s();\n  const {\n    language\n  } = useLanguage();\n  const t = translations[language].chiptuning;\n  const [open, setOpen] = useState(null);\n  const toggleAccordion = idx => setOpen(open === idx ? null : idx);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"chiptuning\",\n    className: \"chip\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"chip__title\",\n      children: t.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chip__grid\",\n      children: t.features.map((f, i) => /*#__PURE__*/_jsxDEV(\"article\", {\n        className: \"chip__card\",\n        \"aria-label\": f.title,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chip__content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"chip__card-title\",\n            children: f.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"chip__list\",\n            children: f.text.map((line, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: line\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chip__media\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: iconMap[f.icon],\n            alt: \"\",\n            \"aria-hidden\": \"true\",\n            loading: \"lazy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chip__stages\",\n      children: t.stages.map((s, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chip__stage\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: stageMap[s.stageKey],\n          alt: \"\",\n          className: \"chip__stage-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"chip__stage-title\",\n          children: s.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"chip__stage-desc\",\n          children: s.desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chip__accordions\",\n      children: t.accordions.map((a, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chip__accordion ${open === i ? 'chip__accordion--open' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"chip__accordion-header\",\n          onClick: () => toggleAccordion(i),\n          children: [a.title, /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `chip__accordion-icon ${open === i ? 'open' : ''}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), open === i && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chip__accordion-content\",\n          children: a.content.split('\\n').map((p, idx) => p.trim() ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: p\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 30\n          }, this) : null)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 15\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(Chiptuning, \"DOwBaGR6rJKitjnEkzo0EbQhRXQ=\", false, function () {\n  return [useLanguage];\n});\n_c = Chiptuning;\nvar _c;\n$RefreshReg$(_c, \"Chiptuning\");","map":{"version":3,"names":["React","useState","useLanguage","translations","powerImg","dynamicsImg","fuelImg","smoothImg","errorImg","safetyImg","stage1","stage2","stage3","jsxDEV","_jsxDEV","iconMap","power","dynamics","fuel","smooth","error","safety","stageMap","Chiptuning","_s","language","t","chiptuning","open","setOpen","toggleAccordion","idx","id","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","features","map","f","i","text","line","src","icon","alt","loading","stages","s","stageKey","desc","accordions","a","onClick","content","split","p","trim","_c","$RefreshReg$"],"sources":["/Users/alexandrugarabajii/Dev/Ruric-SRL/src/components/ChiptuningBlock/ChiptuningBlock.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport './ChiptuningBlock.css';\nimport { useLanguage } from '../languageContext/laguageContext';\nimport { translations } from '../../translations';\n\nimport {\n  powerImg,\n  dynamicsImg,\n  fuelImg,\n  smoothImg,\n  errorImg,\n  safetyImg,\n  stage1,\n  stage2,\n  stage3,\n} from 'images/chiptuning';\n\nconst iconMap: Record<string, string> = {\n  power: powerImg,\n  dynamics: dynamicsImg,\n  fuel: fuelImg,\n  smooth: smoothImg,\n  error: errorImg,\n  safety: safetyImg,\n};\nconst stageMap: Record<string, string> = {\n  stage1,\n  stage2,\n  stage3,\n};\n\nexport default function Chiptuning() {\n  const { language } = useLanguage();\n  const t = translations[language].chiptuning;\n\n  const [open, setOpen] = useState<number | null>(null);\n  const toggleAccordion = (idx: number) => setOpen(open === idx ? null : idx);\n\n  return (\n    <section id=\"chiptuning\" className=\"chip\">\n      <h2 className=\"chip__title\">{t.title}</h2>\n\n      <div className=\"chip__grid\">\n        {t.features.map((f, i) => (\n          <article key={i} className=\"chip__card\" aria-label={f.title}>\n            <div className=\"chip__content\">\n              <h3 className=\"chip__card-title\">{f.title}</h3>\n              <ul className=\"chip__list\">\n                {f.text.map((line: string, idx: number) => (\n                  <li key={idx}>{line}</li>\n                ))}\n              </ul>\n            </div>\n\n            <div className=\"chip__media\">\n              <img src={iconMap[f.icon]} alt=\"\" aria-hidden=\"true\" loading=\"lazy\" />\n            </div>\n          </article>\n        ))}\n      </div>\n\n      <div className=\"chip__stages\">\n        {t.stages.map((s, i) => (\n          <div key={i} className=\"chip__stage\">\n            <img src={stageMap[s.stageKey]} alt=\"\" className=\"chip__stage-img\" />\n            <span className=\"chip__stage-title\">{s.title}</span>\n            <p className=\"chip__stage-desc\">{s.desc}</p>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"chip__accordions\">\n        {t.accordions.map((a, i) => (\n          <div\n            key={i}\n            className={`chip__accordion ${open === i ? 'chip__accordion--open' : ''}`}\n          >\n            <button className=\"chip__accordion-header\" onClick={() => toggleAccordion(i)}>\n              {a.title}\n              <span className={`chip__accordion-icon ${open === i ? 'open' : ''}`} />\n            </button>\n            {open === i && (\n              <div className=\"chip__accordion-content\">\n                {a.content.split('\\n').map((p: string, idx: number) =>\n                  p.trim() ? <p key={idx}>{p}</p> : null\n                )}\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    </section>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}