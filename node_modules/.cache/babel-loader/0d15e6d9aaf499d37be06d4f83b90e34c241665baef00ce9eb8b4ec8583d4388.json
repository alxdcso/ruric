{"ast":null,"code":"var _jsxFileName = \"/Users/alexandrugarabajii/Dev/Ruric-SRL/src/components/ChiptuningBlock/ChiptuningBlock.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './ChiptuningBlock.css';\nimport { useLanguage } from '../languageContext/laguageContext';\nimport { translations } from '../../translations';\nimport { powerImg, dynamicsImg, fuelImg, smoothImg, errorImg, safetyImg, stage1, stage2, stage3 } from 'images/chiptuning';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst iconMap = {\n  power: powerImg,\n  dynamics: dynamicsImg,\n  fuel: fuelImg,\n  smooth: smoothImg,\n  error: errorImg,\n  safety: safetyImg\n};\nconst stageMap = {\n  stage1,\n  stage2,\n  stage3\n};\nexport default function Chiptuning() {\n  _s();\n  const {\n    language\n  } = useLanguage();\n  const t = translations[language].chiptuning;\n\n  // --- Accordion state\n  const [open, setOpen] = useState(null);\n  const toggleAccordion = idx => setOpen(open === idx ? null : idx);\n\n  // --- Reveal-on-scroll state\n  const [revealed, setRevealed] = useState(new Set());\n  const cardRefs = useRef([]);\n\n  // Reset animation state when language (content) changes\n  useEffect(() => {\n    setRevealed(new Set());\n  }, [language]);\n\n  // Observe feature cards and reveal when they enter viewport\n  useEffect(() => {\n    const io = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          const idxAttr = entry.target.getAttribute('data-idx');\n          if (idxAttr) {\n            const idx = Number(idxAttr);\n            setRevealed(prev => {\n              if (prev.has(idx)) return prev;\n              const next = new Set(prev);\n              next.add(idx);\n              return next;\n            });\n          }\n          io.unobserve(entry.target);\n        }\n      });\n    }, {\n      threshold: 0.25\n    });\n    cardRefs.current.forEach(el => el && io.observe(el));\n    return () => io.disconnect();\n  }, [t.features.length]); // re-run if feature count changes\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"chiptuning\",\n    className: \"chip\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"chip__title\",\n      children: t.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chip__grid\",\n      children: t.features.map((f, i) => /*#__PURE__*/_jsxDEV(\"article\", {\n        ref: el => cardRefs.current[i] = el,\n        \"data-idx\": i,\n        className: `chip__card ${revealed.has(i) ? 'revealed' : ''}`\n        // tiny stagger per index\n        ,\n        style: {\n          transitionDelay: revealed.has(i) ? `${i * 80}ms` : '0ms'\n        },\n        \"aria-label\": f.title,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chip__content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"chip__card-title\",\n            children: f.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"chip__list\",\n            children: f.text.map((line, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: line\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chip__media\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: iconMap[f.icon],\n            alt: \"\",\n            \"aria-hidden\": \"true\",\n            loading: \"lazy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chip__stages\",\n      children: t.stages.map((s, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chip__stage\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: stageMap[s.stageKey],\n          alt: \"\",\n          className: \"chip__stage-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"chip__stage-title\",\n          children: s.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"chip__stage-desc\",\n          children: s.desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chip__accordions\",\n      children: t.accordions.map((a, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chip__accordion ${open === i ? 'chip__accordion--open' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"chip__accordion-header\",\n          onClick: () => toggleAccordion(i),\n          children: [a.title, /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `chip__accordion-icon ${open === i ? 'open' : ''}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this), open === i && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chip__accordion-content\",\n          children: a.content.split('\\n').map((p, idx) => p.trim() ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: p\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 30\n          }, this) : null)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(Chiptuning, \"oRKLcf7jjVak5XoaNvAz1U8COFk=\", false, function () {\n  return [useLanguage];\n});\n_c = Chiptuning;\nvar _c;\n$RefreshReg$(_c, \"Chiptuning\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useLanguage","translations","powerImg","dynamicsImg","fuelImg","smoothImg","errorImg","safetyImg","stage1","stage2","stage3","jsxDEV","_jsxDEV","iconMap","power","dynamics","fuel","smooth","error","safety","stageMap","Chiptuning","_s","language","t","chiptuning","open","setOpen","toggleAccordion","idx","revealed","setRevealed","Set","cardRefs","io","IntersectionObserver","entries","forEach","entry","isIntersecting","idxAttr","target","getAttribute","Number","prev","has","next","add","unobserve","threshold","current","el","observe","disconnect","features","length","id","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","map","f","i","ref","style","transitionDelay","text","line","src","icon","alt","loading","stages","s","stageKey","desc","accordions","a","onClick","content","split","p","trim","_c","$RefreshReg$"],"sources":["/Users/alexandrugarabajii/Dev/Ruric-SRL/src/components/ChiptuningBlock/ChiptuningBlock.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './ChiptuningBlock.css';\nimport { useLanguage } from '../languageContext/laguageContext';\nimport { translations } from '../../translations';\n\nimport {\n  powerImg,\n  dynamicsImg,\n  fuelImg,\n  smoothImg,\n  errorImg,\n  safetyImg,\n  stage1,\n  stage2,\n  stage3,\n} from 'images/chiptuning';\n\nconst iconMap: Record<string, string> = {\n  power: powerImg,\n  dynamics: dynamicsImg,\n  fuel: fuelImg,\n  smooth: smoothImg,\n  error: errorImg,\n  safety: safetyImg,\n};\n\nconst stageMap: Record<string, string> = {\n  stage1,\n  stage2,\n  stage3,\n};\n\nexport default function Chiptuning() {\n  const { language } = useLanguage();\n  const t = translations[language].chiptuning;\n\n  // --- Accordion state\n  const [open, setOpen] = useState<number | null>(null);\n  const toggleAccordion = (idx: number) => setOpen(open === idx ? null : idx);\n\n  // --- Reveal-on-scroll state\n  const [revealed, setRevealed] = useState<Set<number>>(new Set());\n  const cardRefs = useRef<(HTMLDivElement | null)[]>([]);\n\n  // Reset animation state when language (content) changes\n  useEffect(() => {\n    setRevealed(new Set());\n  }, [language]);\n\n  // Observe feature cards and reveal when they enter viewport\n  useEffect(() => {\n    const io = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            const idxAttr = entry.target.getAttribute('data-idx');\n            if (idxAttr) {\n              const idx = Number(idxAttr);\n              setRevealed((prev) => {\n                if (prev.has(idx)) return prev;\n                const next = new Set(prev);\n                next.add(idx);\n                return next;\n              });\n            }\n            io.unobserve(entry.target);\n          }\n        });\n      },\n      { threshold: 0.25 }\n    );\n\n    cardRefs.current.forEach((el) => el && io.observe(el));\n    return () => io.disconnect();\n  }, [t.features.length]); // re-run if feature count changes\n\n  return (\n    <section id=\"chiptuning\" className=\"chip\">\n      <h2 className=\"chip__title\">{t.title}</h2>\n\n      <div className=\"chip__grid\">\n        {t.features.map((f, i) => (\n          <article\n            key={i}\n            ref={(el) => (cardRefs.current[i] = el)}\n            data-idx={i}\n            className={`chip__card ${revealed.has(i) ? 'revealed' : ''}`}\n            // tiny stagger per index\n            style={{ transitionDelay: revealed.has(i) ? `${i * 80}ms` : '0ms' }}\n            aria-label={f.title}\n          >\n            <div className=\"chip__content\">\n              <h3 className=\"chip__card-title\">{f.title}</h3>\n              <ul className=\"chip__list\">\n                {f.text.map((line: string, idx: number) => (\n                  <li key={idx}>{line}</li>\n                ))}\n              </ul>\n            </div>\n\n            <div className=\"chip__media\">\n              <img src={iconMap[f.icon]} alt=\"\" aria-hidden=\"true\" loading=\"lazy\" />\n            </div>\n          </article>\n        ))}\n      </div>\n\n      <div className=\"chip__stages\">\n        {t.stages.map((s, i) => (\n          <div key={i} className=\"chip__stage\">\n            <img src={stageMap[s.stageKey]} alt=\"\" className=\"chip__stage-img\" />\n            <span className=\"chip__stage-title\">{s.title}</span>\n            <p className=\"chip__stage-desc\">{s.desc}</p>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"chip__accordions\">\n        {t.accordions.map((a, i) => (\n          <div\n            key={i}\n            className={`chip__accordion ${open === i ? 'chip__accordion--open' : ''}`}\n          >\n            <button className=\"chip__accordion-header\" onClick={() => toggleAccordion(i)}>\n              {a.title}\n              <span className={`chip__accordion-icon ${open === i ? 'open' : ''}`} />\n            </button>\n            {open === i && (\n              <div className=\"chip__accordion-content\">\n                {a.content.split('\\n').map((p: string, idx: number) =>\n                  p.trim() ? <p key={idx}>{p}</p> : null\n                )}\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    </section>\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,uBAAuB;AAC9B,SAASC,WAAW,QAAQ,mCAAmC;AAC/D,SAASC,YAAY,QAAQ,oBAAoB;AAEjD,SACEC,QAAQ,EACRC,WAAW,EACXC,OAAO,EACPC,SAAS,EACTC,QAAQ,EACRC,SAAS,EACTC,MAAM,EACNC,MAAM,EACNC,MAAM,QACD,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,OAA+B,GAAG;EACtCC,KAAK,EAAEZ,QAAQ;EACfa,QAAQ,EAAEZ,WAAW;EACrBa,IAAI,EAAEZ,OAAO;EACba,MAAM,EAAEZ,SAAS;EACjBa,KAAK,EAAEZ,QAAQ;EACfa,MAAM,EAAEZ;AACV,CAAC;AAED,MAAMa,QAAgC,GAAG;EACvCZ,MAAM;EACNC,MAAM;EACNC;AACF,CAAC;AAED,eAAe,SAASW,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACnC,MAAM;IAAEC;EAAS,CAAC,GAAGvB,WAAW,CAAC,CAAC;EAClC,MAAMwB,CAAC,GAAGvB,YAAY,CAACsB,QAAQ,CAAC,CAACE,UAAU;;EAE3C;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAG5B,QAAQ,CAAgB,IAAI,CAAC;EACrD,MAAM6B,eAAe,GAAIC,GAAW,IAAKF,OAAO,CAACD,IAAI,KAAKG,GAAG,GAAG,IAAI,GAAGA,GAAG,CAAC;;EAE3E;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGhC,QAAQ,CAAc,IAAIiC,GAAG,CAAC,CAAC,CAAC;EAChE,MAAMC,QAAQ,GAAGnC,MAAM,CAA4B,EAAE,CAAC;;EAEtD;EACAD,SAAS,CAAC,MAAM;IACdkC,WAAW,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC;EACxB,CAAC,EAAE,CAACT,QAAQ,CAAC,CAAC;;EAEd;EACA1B,SAAS,CAAC,MAAM;IACd,MAAMqC,EAAE,GAAG,IAAIC,oBAAoB,CAChCC,OAAO,IAAK;MACXA,OAAO,CAACC,OAAO,CAAEC,KAAK,IAAK;QACzB,IAAIA,KAAK,CAACC,cAAc,EAAE;UACxB,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAM,CAACC,YAAY,CAAC,UAAU,CAAC;UACrD,IAAIF,OAAO,EAAE;YACX,MAAMX,GAAG,GAAGc,MAAM,CAACH,OAAO,CAAC;YAC3BT,WAAW,CAAEa,IAAI,IAAK;cACpB,IAAIA,IAAI,CAACC,GAAG,CAAChB,GAAG,CAAC,EAAE,OAAOe,IAAI;cAC9B,MAAME,IAAI,GAAG,IAAId,GAAG,CAACY,IAAI,CAAC;cAC1BE,IAAI,CAACC,GAAG,CAAClB,GAAG,CAAC;cACb,OAAOiB,IAAI;YACb,CAAC,CAAC;UACJ;UACAZ,EAAE,CAACc,SAAS,CAACV,KAAK,CAACG,MAAM,CAAC;QAC5B;MACF,CAAC,CAAC;IACJ,CAAC,EACD;MAAEQ,SAAS,EAAE;IAAK,CACpB,CAAC;IAEDhB,QAAQ,CAACiB,OAAO,CAACb,OAAO,CAAEc,EAAE,IAAKA,EAAE,IAAIjB,EAAE,CAACkB,OAAO,CAACD,EAAE,CAAC,CAAC;IACtD,OAAO,MAAMjB,EAAE,CAACmB,UAAU,CAAC,CAAC;EAC9B,CAAC,EAAE,CAAC7B,CAAC,CAAC8B,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEzB,oBACE3C,OAAA;IAAS4C,EAAE,EAAC,YAAY;IAACC,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACvC9C,OAAA;MAAI6C,SAAS,EAAC,aAAa;MAAAC,QAAA,EAAElC,CAAC,CAACmC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAE1CnD,OAAA;MAAK6C,SAAS,EAAC,YAAY;MAAAC,QAAA,EACxBlC,CAAC,CAAC8B,QAAQ,CAACU,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,kBACnBtD,OAAA;QAEEuD,GAAG,EAAGhB,EAAE,IAAMlB,QAAQ,CAACiB,OAAO,CAACgB,CAAC,CAAC,GAAGf,EAAI;QACxC,YAAUe,CAAE;QACZT,SAAS,EAAE,cAAc3B,QAAQ,CAACe,GAAG,CAACqB,CAAC,CAAC,GAAG,UAAU,GAAG,EAAE;QAC1D;QAAA;QACAE,KAAK,EAAE;UAAEC,eAAe,EAAEvC,QAAQ,CAACe,GAAG,CAACqB,CAAC,CAAC,GAAG,GAAGA,CAAC,GAAG,EAAE,IAAI,GAAG;QAAM,CAAE;QACpE,cAAYD,CAAC,CAACN,KAAM;QAAAD,QAAA,gBAEpB9C,OAAA;UAAK6C,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC5B9C,OAAA;YAAI6C,SAAS,EAAC,kBAAkB;YAAAC,QAAA,EAAEO,CAAC,CAACN;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC/CnD,OAAA;YAAI6C,SAAS,EAAC,YAAY;YAAAC,QAAA,EACvBO,CAAC,CAACK,IAAI,CAACN,GAAG,CAAC,CAACO,IAAY,EAAE1C,GAAW,kBACpCjB,OAAA;cAAA8C,QAAA,EAAea;YAAI,GAAV1C,GAAG;cAAA+B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CACzB;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC,eAENnD,OAAA;UAAK6C,SAAS,EAAC,aAAa;UAAAC,QAAA,eAC1B9C,OAAA;YAAK4D,GAAG,EAAE3D,OAAO,CAACoD,CAAC,CAACQ,IAAI,CAAE;YAACC,GAAG,EAAC,EAAE;YAAC,eAAY,MAAM;YAACC,OAAO,EAAC;UAAM;YAAAf,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnE,CAAC;MAAA,GAnBDG,CAAC;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAoBC,CACV;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAENnD,OAAA;MAAK6C,SAAS,EAAC,cAAc;MAAAC,QAAA,EAC1BlC,CAAC,CAACoD,MAAM,CAACZ,GAAG,CAAC,CAACa,CAAC,EAAEX,CAAC,kBACjBtD,OAAA;QAAa6C,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAClC9C,OAAA;UAAK4D,GAAG,EAAEpD,QAAQ,CAACyD,CAAC,CAACC,QAAQ,CAAE;UAACJ,GAAG,EAAC,EAAE;UAACjB,SAAS,EAAC;QAAiB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACrEnD,OAAA;UAAM6C,SAAS,EAAC,mBAAmB;UAAAC,QAAA,EAAEmB,CAAC,CAAClB;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACpDnD,OAAA;UAAG6C,SAAS,EAAC,kBAAkB;UAAAC,QAAA,EAAEmB,CAAC,CAACE;QAAI;UAAAnB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAHpCG,CAAC;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIN,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAENnD,OAAA;MAAK6C,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAC9BlC,CAAC,CAACwD,UAAU,CAAChB,GAAG,CAAC,CAACiB,CAAC,EAAEf,CAAC,kBACrBtD,OAAA;QAEE6C,SAAS,EAAE,mBAAmB/B,IAAI,KAAKwC,CAAC,GAAG,uBAAuB,GAAG,EAAE,EAAG;QAAAR,QAAA,gBAE1E9C,OAAA;UAAQ6C,SAAS,EAAC,wBAAwB;UAACyB,OAAO,EAAEA,CAAA,KAAMtD,eAAe,CAACsC,CAAC,CAAE;UAAAR,QAAA,GAC1EuB,CAAC,CAACtB,KAAK,eACR/C,OAAA;YAAM6C,SAAS,EAAE,wBAAwB/B,IAAI,KAAKwC,CAAC,GAAG,MAAM,GAAG,EAAE;UAAG;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjE,CAAC,EACRrC,IAAI,KAAKwC,CAAC,iBACTtD,OAAA;UAAK6C,SAAS,EAAC,yBAAyB;UAAAC,QAAA,EACrCuB,CAAC,CAACE,OAAO,CAACC,KAAK,CAAC,IAAI,CAAC,CAACpB,GAAG,CAAC,CAACqB,CAAS,EAAExD,GAAW,KAChDwD,CAAC,CAACC,IAAI,CAAC,CAAC,gBAAG1E,OAAA;YAAA8C,QAAA,EAAc2B;UAAC,GAAPxD,GAAG;YAAA+B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,GAAG,IACpC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CACN;MAAA,GAbIG,CAAC;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAcH,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEd;AAACzC,EAAA,CA3GuBD,UAAU;EAAA,QACXrB,WAAW;AAAA;AAAAuF,EAAA,GADVlE,UAAU;AAAA,IAAAkE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}