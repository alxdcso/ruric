{"ast":null,"code":"var _jsxFileName = \"/Users/alexandrugarabajii/Dev/Ruric-SRL/src/components/GalleryMosaic/GalleryMosaic.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport './GalleryMosaic.css';\nimport { galleryExtended } from './gallery';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ALL_IMAGES = galleryExtended;\nconst AREAS = ['box1', 'box2', 'box3', 'box4', 'box5', 'box6', 'box7', 'box8', 'box9', 'box10', 'box11', 'box12'];\n// intervalul de rotire: un singur tile per rundă\nconst ROTATE_MS = 1500;\n\n/** Ia următoarea imagine din pool care NU este în usedSrcs; pool-ul se rotește circular. */\nfunction takeNextUnique(pool, usedSrcs) {\n  // prevenim loop infinit dacă pool-ul e prea mic\n  const maxTries = pool.length || 1;\n  for (let i = 0; i < maxTries; i++) {\n    const candidate = pool.shift(); // există pentru că maxTries>0\n    pool.push(candidate);\n    if (!usedSrcs.has(candidate.src)) {\n      return candidate;\n    }\n  }\n  // dacă totuși toate sunt folosite, returnăm primul (fallback)\n  const fallback = pool.shift();\n  pool.push(fallback);\n  return fallback;\n}\nexport default function GalleryMosaic() {\n  _s();\n  // amestecăm imaginile o singură dată\n  const shuffled = useMemo(() => [...ALL_IMAGES].sort(() => Math.random() - 0.5), []);\n\n  // pool rotativ, folosit atât la inițializare cât și la rotații\n  const poolRef = useRef(shuffled);\n\n  // inițializare fără duplicate simultane\n  const [tiles, setTiles] = useState(() => {\n    const map = {};\n    const used = new Set();\n    AREAS.forEach(area => {\n      const next = takeNextUnique(poolRef.current, used);\n      map[area] = next;\n      used.add(next.src);\n    });\n    return map;\n  });\n  useEffect(() => {\n    const id = setInterval(() => {\n      setTiles(prev => {\n        // alegem o zonă random pentru înlocuire\n        const area = AREAS[Math.floor(Math.random() * AREAS.length)];\n\n        // construim setul de src-uri folosite în celelalte tile-uri\n        const used = new Set();\n        for (const a of AREAS) {\n          if (a !== area) used.add(prev[a].src);\n        }\n\n        // alegem o imagine nouă care nu e deja în mozaic\n        const replacement = takeNextUnique(poolRef.current, used);\n\n        // aplicăm schimbarea doar pe zona aleasă\n        return {\n          ...prev,\n          [area]: replacement\n        };\n      });\n    }, ROTATE_MS);\n    return () => clearInterval(id);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"gallery\",\n    className: \"gm\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"gm__title\",\n      children: \"Galerie lucr\\u0103ri\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gm__grid\",\n      \"aria-label\": \"Mosaic galeria lucr\\u0103rilor\",\n      children: AREAS.map(area => {\n        const item = tiles[area];\n        return /*#__PURE__*/_jsxDEV(\"figure\", {\n          className: `gm__tile ${area}`,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: item.src,\n            alt: item.alt,\n            loading: \"lazy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this)\n        }, area, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(GalleryMosaic, \"R/PLu8r/N8PfPmkh9R1r4Q9j0vM=\");\n_c = GalleryMosaic;\nvar _c;\n$RefreshReg$(_c, \"GalleryMosaic\");","map":{"version":3,"names":["React","useEffect","useMemo","useRef","useState","galleryExtended","jsxDEV","_jsxDEV","ALL_IMAGES","AREAS","ROTATE_MS","takeNextUnique","pool","usedSrcs","maxTries","length","i","candidate","shift","push","has","src","fallback","GalleryMosaic","_s","shuffled","sort","Math","random","poolRef","tiles","setTiles","map","used","Set","forEach","area","next","current","add","id","setInterval","prev","floor","a","replacement","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","item","alt","loading","_c","$RefreshReg$"],"sources":["/Users/alexandrugarabajii/Dev/Ruric-SRL/src/components/GalleryMosaic/GalleryMosaic.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport './GalleryMosaic.css';\nimport { galleryExtended } from './gallery';\n\ntype Item = { src: string; alt: string; caption?: string };\n\nconst ALL_IMAGES: Item[] = galleryExtended;\n\nconst AREAS = [\n  'box1',\n  'box2',\n  'box3',\n  'box4',\n  'box5',\n  'box6',\n  'box7',\n  'box8',\n  'box9',\n  'box10',\n  'box11',\n  'box12',\n] as const;\ntype AreaKey = typeof AREAS[number];\n\n// intervalul de rotire: un singur tile per rundă\nconst ROTATE_MS = 1500;\n\n/** Ia următoarea imagine din pool care NU este în usedSrcs; pool-ul se rotește circular. */\nfunction takeNextUnique(pool: Item[], usedSrcs: Set<string>): Item {\n  // prevenim loop infinit dacă pool-ul e prea mic\n  const maxTries = pool.length || 1;\n  for (let i = 0; i < maxTries; i++) {\n    const candidate = pool.shift() as Item; // există pentru că maxTries>0\n    pool.push(candidate);\n    if (!usedSrcs.has(candidate.src)) {\n      return candidate;\n    }\n  }\n  // dacă totuși toate sunt folosite, returnăm primul (fallback)\n  const fallback = pool.shift() as Item;\n  pool.push(fallback);\n  return fallback;\n}\n\nexport default function GalleryMosaic() {\n  // amestecăm imaginile o singură dată\n  const shuffled = useMemo(\n    () => [...ALL_IMAGES].sort(() => Math.random() - 0.5),\n    []\n  );\n\n  // pool rotativ, folosit atât la inițializare cât și la rotații\n  const poolRef = useRef<Item[]>(shuffled);\n\n  // inițializare fără duplicate simultane\n  const [tiles, setTiles] = useState<Record<AreaKey, Item>>(() => {\n    const map: Partial<Record<AreaKey, Item>> = {};\n    const used = new Set<string>();\n    AREAS.forEach((area) => {\n      const next = takeNextUnique(poolRef.current, used);\n      map[area] = next;\n      used.add(next.src);\n    });\n    return map as Record<AreaKey, Item>;\n  });\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      setTiles((prev) => {\n        // alegem o zonă random pentru înlocuire\n        const area = AREAS[Math.floor(Math.random() * AREAS.length)];\n\n        // construim setul de src-uri folosite în celelalte tile-uri\n        const used = new Set<string>();\n        for (const a of AREAS) {\n          if (a !== area) used.add(prev[a].src);\n        }\n\n        // alegem o imagine nouă care nu e deja în mozaic\n        const replacement = takeNextUnique(poolRef.current, used);\n\n        // aplicăm schimbarea doar pe zona aleasă\n        return { ...prev, [area]: replacement };\n      });\n    }, ROTATE_MS);\n\n    return () => clearInterval(id);\n  }, []);\n\n  return (\n    <section id=\"gallery\" className=\"gm\">\n      <h2 className=\"gm__title\">Galerie lucrări</h2>\n\n      <div className=\"gm__grid\" aria-label=\"Mosaic galeria lucrărilor\">\n        {AREAS.map((area) => {\n          const item = tiles[area];\n          return (\n            <figure key={area} className={`gm__tile ${area}`}>\n              <img src={item.src} alt={item.alt} loading=\"lazy\" />\n              {/* <figcaption>{item.caption ?? item.alt}</figcaption> */}\n            </figure>\n          );\n        })}\n      </div>\n    </section>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}