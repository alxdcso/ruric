{"ast":null,"code":"var _jsxFileName = \"/Users/alexandrugarabajii/Dev/Ruric-SRL/src/components/GalleryMosaic/GalleryMosaic.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport './GalleryMosaic.css';\nimport { galleryExtended } from './gallery';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// sursa de imagini\nconst ALL_IMAGES = galleryExtended;\n\n// 9 zone (mozaic)\nconst AREAS = ['box1', 'box2', 'box3', 'box4', 'box5', 'box6', 'box7', 'box8', 'box9'];\n// rotire ușoară de imagini\nconst ROTATE_MS = 3500;\nconst SWAP_COUNT = 3;\nexport default function GalleryMosaic() {\n  _s();\n  // amestec inițial\n  const shuffled = useMemo(() => ALL_IMAGES.map(x => x).sort(() => Math.random() - 0.5), []);\n  const poolRef = useRef(shuffled);\n\n  // umplem cele 9 tile-uri la start\n  const [tiles, setTiles] = useState(() => {\n    const seed = poolRef.current.slice(0, AREAS.length);\n    const map = {};\n    AREAS.forEach((a, i) => map[a] = seed[i]);\n    return map;\n  });\n\n  // opțional: evită duplicate simultane în grid\n  const hasSrc = (src, state) => Object.values(state).some(it => (it === null || it === void 0 ? void 0 : it.src) === src);\n  useEffect(() => {\n    const id = setInterval(() => {\n      setTiles(prev => {\n        const next = {\n          ...prev\n        };\n        const zones = [...AREAS].sort(() => Math.random() - 0.5).slice(0, SWAP_COUNT);\n        zones.forEach(z => {\n          // ia din pool până găsești ceva care nu dublează vizibil\n          let tries = 0;\n          while (tries < poolRef.current.length) {\n            const candidate = poolRef.current.shift();\n            poolRef.current.push(candidate);\n            if (!hasSrc(candidate.src, next)) {\n              next[z] = candidate;\n              break;\n            }\n            tries++;\n          }\n        });\n        return next;\n      });\n    }, ROTATE_MS);\n    return () => clearInterval(id);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"gallery\",\n    className: \"gm\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"gm__title\",\n      children: \"Galerie lucr\\u0103ri\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gm__grid\",\n      \"aria-label\": \"Mosaic galeria lucr\\u0103rilor\",\n      children: AREAS.map(area => {\n        const item = tiles[area];\n        return /*#__PURE__*/_jsxDEV(\"figure\", {\n          className: `gm__tile ${area}`,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: item.src,\n            alt: item.alt,\n            loading: \"lazy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this)\n        }, area, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(GalleryMosaic, \"vTPextd1pFY+dKpP4FkDMtaIdFE=\");\n_c = GalleryMosaic;\nvar _c;\n$RefreshReg$(_c, \"GalleryMosaic\");","map":{"version":3,"names":["React","useEffect","useMemo","useRef","useState","galleryExtended","jsxDEV","_jsxDEV","ALL_IMAGES","AREAS","ROTATE_MS","SWAP_COUNT","GalleryMosaic","_s","shuffled","map","x","sort","Math","random","poolRef","tiles","setTiles","seed","current","slice","length","forEach","a","i","hasSrc","src","state","Object","values","some","it","id","setInterval","prev","next","zones","z","tries","candidate","shift","push","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","area","item","alt","loading","_c","$RefreshReg$"],"sources":["/Users/alexandrugarabajii/Dev/Ruric-SRL/src/components/GalleryMosaic/GalleryMosaic.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport './GalleryMosaic.css';\nimport { galleryExtended } from './gallery';\n\ntype Item = { src: string; alt: string; caption?: string };\n\n// sursa de imagini\nconst ALL_IMAGES: Item[] = galleryExtended;\n\n// 9 zone (mozaic)\nconst AREAS = [\n  'box1',\n  'box2',\n  'box3',\n  'box4',\n  'box5',\n  'box6',\n  'box7',\n  'box8',\n  'box9',\n] as const;\ntype AreaKey = typeof AREAS[number];\n\n// rotire ușoară de imagini\nconst ROTATE_MS = 3500;\nconst SWAP_COUNT = 3;\n\nexport default function GalleryMosaic() {\n  // amestec inițial\n  const shuffled = useMemo(\n    () => ALL_IMAGES.map((x) => x).sort(() => Math.random() - 0.5),\n    []\n  );\n  const poolRef = useRef(shuffled);\n\n  // umplem cele 9 tile-uri la start\n  const [tiles, setTiles] = useState<Record<AreaKey, Item>>(() => {\n    const seed = poolRef.current.slice(0, AREAS.length);\n    const map: Partial<Record<AreaKey, Item>> = {};\n    AREAS.forEach((a, i) => (map[a] = seed[i]));\n    return map as Record<AreaKey, Item>;\n  });\n\n  // opțional: evită duplicate simultane în grid\n  const hasSrc = (src: string, state: Record<AreaKey, Item>) =>\n    Object.values(state).some((it) => it?.src === src);\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      setTiles((prev) => {\n        const next = { ...prev };\n        const zones = [...AREAS].sort(() => Math.random() - 0.5).slice(0, SWAP_COUNT);\n\n        zones.forEach((z) => {\n          // ia din pool până găsești ceva care nu dublează vizibil\n          let tries = 0;\n          while (tries < poolRef.current.length) {\n            const candidate = poolRef.current.shift()!;\n            poolRef.current.push(candidate);\n            if (!hasSrc(candidate.src, next)) {\n              next[z] = candidate;\n              break;\n            }\n            tries++;\n          }\n        });\n\n        return next;\n      });\n    }, ROTATE_MS);\n\n    return () => clearInterval(id);\n  }, []);\n\n  return (\n    <section id=\"gallery\" className=\"gm\">\n      <h2 className=\"gm__title\">Galerie lucrări</h2>\n\n      <div className=\"gm__grid\" aria-label=\"Mosaic galeria lucrărilor\">\n        {AREAS.map((area) => {\n          const item = tiles[area];\n          return (\n            <figure key={area} className={`gm__tile ${area}`}>\n              <img src={item.src} alt={item.alt} loading=\"lazy\" />\n            </figure>\n          );\n        })}\n      </div>\n    </section>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}