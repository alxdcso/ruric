{"ast":null,"code":"var _jsxFileName = \"/Users/alexandrugarabajii/Dev/Ruric-SRL/src/components/languageContext/laguageContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LanguageContext = /*#__PURE__*/createContext(undefined);\nexport const LanguageProvider = ({\n  children\n}) => {\n  _s();\n  const [language, setLanguage] = useState('ro');\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: {\n      language,\n      setLanguage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n_s(LanguageProvider, \"1EYeF8KCKzaGII6/JsIhWKv0WKs=\");\n_c = LanguageProvider;\nexport const useLanguage = () => {\n  _s2();\n  const context = useContext(LanguageContext);\n  if (!context) throw new Error('useLanguage must be used within a LanguageProvider');\n  return context;\n};\n_s2(useLanguage, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","LanguageContext","undefined","LanguageProvider","children","_s","language","setLanguage","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useLanguage","_s2","context","Error","$RefreshReg$"],"sources":["/Users/alexandrugarabajii/Dev/Ruric-SRL/src/components/languageContext/laguageContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, ReactNode } from 'react';\n\ntype Language = 'ro' | 'ru';\n\ninterface LanguageContextProps {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n}\n\nconst LanguageContext = createContext<LanguageContextProps | undefined>(undefined);\n\nexport const LanguageProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [language, setLanguage] = useState<Language>('ro');\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n};\n\nexport const useLanguage = () => {\n  const context = useContext(LanguageContext);\n  if (!context) throw new Error('useLanguage must be used within a LanguageProvider');\n  return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS9E,MAAMC,eAAe,gBAAGL,aAAa,CAAmCM,SAAS,CAAC;AAElF,OAAO,MAAMC,gBAAmD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnF,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAW,IAAI,CAAC;EAExD,oBACEG,OAAA,CAACC,eAAe,CAACO,QAAQ;IAACC,KAAK,EAAE;MAAEH,QAAQ;MAAEC;IAAY,CAAE;IAAAH,QAAA,EACxDA;EAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACR,EAAA,CARWF,gBAAmD;AAAAW,EAAA,GAAnDX,gBAAmD;AAUhE,OAAO,MAAMY,WAAW,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC/B,MAAMC,OAAO,GAAGnB,UAAU,CAACG,eAAe,CAAC;EAC3C,IAAI,CAACgB,OAAO,EAAE,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;EACnF,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CAJWD,WAAW;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}